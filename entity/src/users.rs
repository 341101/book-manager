//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3
use crate::AccessPermission;
use sea_orm::entity::prelude::*;
use serde::Serialize;
use chrono::NaiveDate;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub nickname: String,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))")]
    #[serde(skip_serializing)]
    pub password_hash: String,
    pub permission: AccessPermission,
    pub registration_date: NaiveDate,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::borrowed_books::Entity")]
    BorrowedBooks,
}

impl Related<super::borrowed_books::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BorrowedBooks.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
